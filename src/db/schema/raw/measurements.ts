import { text, integer, foreignKey } from "drizzle-orm/pg-core";
import { createTable } from "../../utils/create-table";
import { loadRunFiles } from "../etl/audit";

export const measurementsRaw = createTable("raw.measurements", {
  // Source columns as text (all fields from Measurements extract)
  patientId: text("patient_id"),
  screaningId: text("screaning_id"),
  appointmentId: text("appointment_id"),
  screeningDate: text("screening_date"),
  scncode: text("scncode"),
  screeningType: text("screening_type"),
  screeningGroup: text("screening_group"),
  outcome: text("outcome"),
  outcomeDescription: text("outcome_description"),
  notes: text("notes"),
  isActive: text("is_active"),
  updatedById: text("updated_by_id"),
  updatedBy: text("updated_by"),
  updatedAt: text("updated_at"),
  insertedById: text("inserted_by_id"),
  insertedBy: text("inserted_by"),
  insertedAt: text("inserted_at"),
  patientMedTechId: text("patient_med_tech_id"),
  practice: text("practice"),
  practiceId: text("practice_id"),
  providerId: text("provider_id"),
  providerCode: text("provider_code"),
  providerName: text("provider_name"),
  hbaic: text("hbaic"),
  isDeleted: text("is_deleted"),
  carePlanId: text("care_plan_id"),
  carePlaneName: text("care_plane_name"),
  isConfidential: text("is_confidential"),
  isGp2Gp: text("is_gp2gp"),
  isPatientPortal: text("is_patient_portal"),
  isShowonTimeLine: text("is_showon_time_line"),
  medTechId: text("med_tech_id"),
  screeningSourceTypeId: text("screening_source_type_id"),
  serviceTemplateId: text("service_template_id"),
  serviceTemplateName: text("service_template_name"),
  userLoggingId: text("user_logging_id"),
  loggingUserName: text("logging_user_name"),
  field1: text("field1"),
  field2: text("field2"),
  field3: text("field3"),
  field4: text("field4"),
  field5: text("field5"),
  field6: text("field6"),
  field7: text("field7"),
  field8: text("field8"),
  field9: text("field9"),
  field10: text("field10"),
  field11: text("field11"),
  field12: text("field12"),
  field13: text("field13"),
  field14: text("field14"),
  field15: text("field15"),
  field16: text("field16"),
  field17: text("field17"),
  field18: text("field18"),
  field19: text("field19"),
  field20: text("field20"),
  field21: text("field21"),
  field22: text("field22"),
  field23: text("field23"),
  field24: text("field24"),
  field25: text("field25"),
  field26: text("field26"),
  field27: text("field27"),
  field28: text("field28"),
  field29: text("field29"),
  field30: text("field30"),
  field31: text("field31"),
  field32: text("field32"),
  field33: text("field33"),
  field34: text("field34"),
  field35: text("field35"),
  field36: text("field36"),
  field37: text("field37"),
  field38: text("field38"),
  field39: text("field39"),
  field40: text("field40"),
  field41: text("field41"),
  field42: text("field42"),
  field43: text("field43"),
  field44: text("field44"),
  field45: text("field45"),
  field46: text("field46"),
  field47: text("field47"),
  field48: text("field48"),
  field49: text("field49"),
  field50: text("field50"),
  permanentAddressLatitude: text("permanent_address_latitude"),
  permanentAddressLongitude: text("permanent_address_longitude"),
  practiceLocationId: text("practice_location_id"),
  locationName: text("location_name"),
  field51: text("field51"),
  field52: text("field52"),
  field53: text("field53"),
  field54: text("field54"),
  field55: text("field55"),
  field56: text("field56"),
  field57: text("field57"),
  field58: text("field58"),
  field59: text("field59"),
  field60: text("field60"),
  field61: text("field61"),
  field62: text("field62"),
  field63: text("field63"),
  field64: text("field64"),
  field65: text("field65"),
  field66: text("field66"),
  field67: text("field67"),
  field68: text("field68"),
  field69: text("field69"),
  field70: text("field70"),
  field71: text("field71"),
  field72: text("field72"),
  field73: text("field73"),
  field74: text("field74"),
  field75: text("field75"),
  field76: text("field76"),
  field77: text("field77"),
  field78: text("field78"),
  field79: text("field79"),
  field80: text("field80"),
  field81: text("field81"),
  field82: text("field82"),
  field83: text("field83"),
  field84: text("field84"),
  field85: text("field85"),
  field86: text("field86"),
  field87: text("field87"),
  field88: text("field88"),
  field89: text("field89"),
  field90: text("field90"),
  field91: text("field91"),
  field92: text("field92"),
  field93: text("field93"),
  field94: text("field94"),
  field95: text("field95"),
  field96: text("field96"),
  field97: text("field97"),
  field98: text("field98"),
  field99: text("field99"),
  field100: text("field100"),
  score: text("score"),
  screeningTypeId: text("screening_type_id"),
  perOrgId: text("per_org_id"),
  loadedDateTime: text("loaded_date_time"),

  // Foreign key to load_run_files for lineage data
  loadRunFileId: integer("load_run_file_id").notNull(),
});

// Foreign key constraint to etl.load_run_files
export const fkMeasurementsLoadRunFile = foreignKey({
  columns: [measurementsRaw.loadRunFileId],
  foreignColumns: [loadRunFiles.loadRunFileId],
  name: "fk_measurements_load_run_file",
});
