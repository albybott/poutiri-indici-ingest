import {
  text,
  timestamp,
  uuid,
  boolean,
  integer,
  date,
  check,
  uniqueIndex,
  foreignKey,
} from "drizzle-orm/pg-core";
import { createTable } from "../../utils/create-table";
import { loadRunFiles } from "../etl/audit";

export const inboxRaw = createTable("raw.inbox", {
  // Source columns as text (all fields from inbox extract)
  inboxFolderItemId: text("inbox_folder_item_id"),
  folderId: text("folder_id"),
  folderName: text("folder_name"),
  isSystemFolder: text("is_system_folder"),
  orderNo: text("order_no"),
  itemTypeId: text("item_type_id"),
  itemType: text("item_type"),
  patientId: text("patient_id"),
  providerId: text("provider_id"),
  practiceId: text("practice_id"),
  patientName: text("patient_name"),
  provider: text("provider"),
  practiceName: text("practice_name"),
  fromOrgId: text("from_org_id"),
  fromOrganizationName: text("from_organization_name"),
  assignToId: text("assign_to_id"),
  assignTo: text("assign_to"),
  resultDate: text("result_date"),
  messageSubjectId: text("message_subject_id"),
  messageSubject: text("message_subject"),
  comments: text("comments"),
  markAsRead: text("mark_as_read"),
  isConfidential: text("is_confidential"),
  showOnPortal: text("show_on_portal"),
  isReviewed: text("is_reviewed"),
  showOnTimeLine: text("show_on_time_line"),
  isActive: text("is_active"),
  isDeleted: text("is_deleted"),
  insertedById: text("inserted_by_id"),
  insertedBy: text("inserted_by"),
  updatedById: text("updated_by_id"),
  updatedBy: text("updated_by"),
  insertedAt: text("inserted_at"),
  updatedAt: text("updated_at"),
  medTechId: text("med_tech_id"),
  dmsId: text("dms_id"),
  isRepeatRx: text("is_repeat_rx"),
  isRepliedRx: text("is_replied_rx"),
  externalRef: text("external_ref"),
  abnormResult: text("abnorm_result"),
  isDeactivated: text("is_deactivated"),
  folderGroup: text("folder_group"),
  documentCode: text("document_code"),
  isGp2Gp: text("is_gp2gp"),
  informatId: text("informat_id"),
  informat: text("informat"),
  permanentAddressLatitude: text("permanent_address_latitude"),
  permanentAddressLongitude: text("permanent_address_longitude"),
  filedAt: text("filed_at"),
  perOrgId: text("per_org_id"),
  loadedDateTime: text("loaded_date_time"),

  // Foreign key to load_run_files for lineage data
  loadRunFileId: integer("load_run_file_id").notNull(),
});

// Foreign key constraint to etl.load_run_files
export const fkinboxRawLoadRunFile = foreignKey({
  columns: [inboxRaw.loadRunFileId],
  foreignColumns: [loadRunFiles.loadRunFileId],
  name: "fk_inbox_load_run_file",
});
