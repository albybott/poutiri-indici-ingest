import { text, integer, foreignKey } from "drizzle-orm/pg-core";
import { createTable } from "../../utils/create-table";
import { loadRunFiles } from "../etl/audit";

export const allergiesRaw = createTable("raw.allergies", {
  // Source columns as text (all fields from Allergies extract)
  allergyId: text("allergy_id"),
  appointmentId: text("appointment_id"),
  allergyTypeId: text("allergy_type_id"),
  allergyType: text("allergy_type"),
  onsetDate: text("onset_date"),
  deactivationReason: text("deactivation_reason"),
  medicineId: text("medicine_id"),
  medicine: text("medicine"),
  reactionId: text("reaction_id"),
  reactions: text("reactions"),
  reactionTypeId: text("reaction_type_id"),
  reactionType: text("reaction_type"),
  severityId: text("severity_id"),
  severity: text("severity"),
  reactionNotes: text("reaction_notes"),
  isActive: text("is_active"),
  isDeleted: text("is_deleted"),
  insertedById: text("inserted_by_id"),
  insertedBy: text("inserted_by"),
  updatedById: text("updated_by_id"),
  updatedBy: text("updated_by"),
  insertedAt: text("inserted_at"),
  updatedAt: text("updated_at"),
  patientId: text("patient_id"),
  patient: text("patient"),
  isConfidential: text("is_confidential"),
  practiceId: text("practice_id"),
  practice: text("practice"),
  mgencode: text("mgencode"),
  mclacode: text("mclacode"),
  medTechId: text("med_tech_id"),
  medicineClassificationId: text("medicine_classification_id"),
  allergyCategoryId: text("allergy_category_id"),
  allergyCategory: text("allergy_category"),
  comment: text("comment"),
  substanceTypeId: text("substance_type_id"),
  substanceType: text("substance_type"),
  favouriteSubstanceId: text("favourite_substance_id"),
  favouriteSubstance: text("favourite_substance"),
  diseaseId: text("disease_id"),
  disease: text("disease"),
  otherSubstance: text("other_substance"),
  medicineTypeId: text("medicine_type_id"),
  medicineType: text("medicine_type"),
  userLoggingId: text("user_logging_id"),
  loggingUserName: text("logging_user_name"),
  showOnPortal: text("show_on_portal"),
  warningType: text("warning_type"),
  rowinactive: text("rowinactive"),
  isReviewed: text("is_reviewed"),
  providerId: text("provider_id"),
  provider: text("provider"),
  practiceLocationId: text("practice_location_id"),
  locationName: text("location_name"),
  perOrgId: text("per_org_id"),
  loadedDateTime: text("loaded_date_time"),

  // Foreign key to load_run_files for lineage data
  loadRunFileId: integer("load_run_file_id").notNull(),
});

// Foreign key constraint to etl.load_run_files
export const fkAllergiesLoadRunFile = foreignKey({
  columns: [allergiesRaw.loadRunFileId],
  foreignColumns: [loadRunFiles.loadRunFileId],
  name: "fk_allergies_load_run_file",
});
