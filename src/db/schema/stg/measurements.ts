import {
  text,
  timestamp,
  uuid,
  boolean,
  integer,
  decimal,
  date,
  check,
  uniqueIndex,
  foreignKey,
} from "drizzle-orm/pg-core";
import { sql } from "drizzle-orm";
import { createTable } from "../../utils/create-table";
import { loadRunFiles } from "../etl/audit";

export const measurementsStg = createTable(
  "stg.measurements",
  {
    // Typed columns with proper constraints
    patientId: text("patient_id").notNull(),
    screaningId: text("screaning_id").notNull(),
    appointmentId: text("appointment_id"),
    screeningDate: date("screening_date"),
    scncode: text("scncode"),
    screeningType: text("screening_type"),
    screeningGroup: text("screening_group"),
    outcome: text("outcome"),
    outcomeDescription: text("outcome_description"),
    notes: text("notes"),
    isActive: boolean("is_active"),
    updatedById: text("updated_by_id"),
    updatedBy: text("updated_by"),
    updatedAt: timestamp("updated_at", { withTimezone: true }),
    insertedById: text("inserted_by_id"),
    insertedBy: text("inserted_by"),
    insertedAt: timestamp("inserted_at", { withTimezone: true }),
    patientMedTechId: text("patient_med_tech_id"),
    practice: text("practice"),
    practiceId: text("practice_id").notNull(),
    providerId: text("provider_id"),
    providerCode: text("provider_code"),
    providerName: text("provider_name"),
    hbaic: text("hbaic"),
    isDeleted: boolean("is_deleted"),
    carePlanId: text("care_plan_id"),
    carePlaneName: text("care_plane_name"),
    isConfidential: boolean("is_confidential"),
    isGp2Gp: boolean("is_gp_2_gp"),
    isPatientPortal: boolean("is_patient_portal"),
    isShowonTimeLine: boolean("is_showon_time_line"),
    medTechId: text("med_tech_id"),
    screeningSourceTypeId: text("screening_source_type_id"),
    serviceTemplateId: text("service_template_id"),
    serviceTemplateName: text("service_template_name"),
    userLoggingId: text("user_logging_id"),
    loggingUserName: text("logging_user_name"),
    field1: text("field_1"),
    field2: text("field_2"),
    field3: text("field_3"),
    field4: text("field_4"),
    field5: text("field_5"),
    field6: text("field_6"),
    field7: text("field_7"),
    field8: text("field_8"),
    field9: text("field_9"),
    field10: text("field_10"),
    field11: text("field_11"),
    field12: text("field_12"),
    field13: text("field_13"),
    field14: text("field_14"),
    field15: text("field_15"),
    field16: text("field_16"),
    field17: text("field_17"),
    field18: text("field_18"),
    field19: text("field_19"),
    field20: text("field_20"),
    field21: text("field_21"),
    field22: text("field_22"),
    field23: text("field_23"),
    field24: text("field_24"),
    field25: text("field_25"),
    field26: text("field_26"),
    field27: text("field_27"),
    field28: text("field_28"),
    field29: text("field_29"),
    field30: text("field_30"),
    field31: text("field_31"),
    field32: text("field_32"),
    field33: text("field_33"),
    field34: text("field_34"),
    field35: text("field_35"),
    field36: text("field_36"),
    field37: text("field_37"),
    field38: text("field_38"),
    field39: text("field_39"),
    field40: text("field_40"),
    field41: text("field_41"),
    field42: text("field_42"),
    field43: text("field_43"),
    field44: text("field_44"),
    field45: text("field_45"),
    field46: text("field_46"),
    field47: text("field_47"),
    field48: text("field_48"),
    field49: text("field_49"),
    field50: text("field_50"),
    permanentAddressLatitude: decimal("permanent_address_latitude", {
      precision: 10,
      scale: 8,
    }),
    permanentAddressLongitude: decimal("permanent_address_longitude", {
      precision: 11,
      scale: 8,
    }),
    practiceLocationId: text("practice_location_id"),
    locationName: text("location_name"),
    field51: text("field_51"),
    field52: text("field_52"),
    field53: text("field_53"),
    field54: text("field_54"),
    field55: text("field_55"),
    field56: text("field_56"),
    field57: text("field_57"),
    field58: text("field_58"),
    field59: text("field_59"),
    field60: text("field_60"),
    field61: text("field_61"),
    field62: text("field_62"),
    field63: text("field_63"),
    field64: text("field_64"),
    field65: text("field_65"),
    field66: text("field_66"),
    field67: text("field_67"),
    field68: text("field_68"),
    field69: text("field_69"),
    field70: text("field_70"),
    field71: text("field_71"),
    field72: text("field_72"),
    field73: text("field_73"),
    field74: text("field_74"),
    field75: text("field_75"),
    field76: text("field_76"),
    field77: text("field_77"),
    field78: text("field_78"),
    field79: text("field_79"),
    field80: text("field_80"),
    field81: text("field_81"),
    field82: text("field_82"),
    field83: text("field_83"),
    field84: text("field_84"),
    field85: text("field_85"),
    field86: text("field_86"),
    field87: text("field_87"),
    field88: text("field_88"),
    field89: text("field_89"),
    field90: text("field_90"),
    field91: text("field_91"),
    field92: text("field_92"),
    field93: text("field_93"),
    field94: text("field_94"),
    field95: text("field_95"),
    field96: text("field_96"),
    field97: text("field_97"),
    field98: text("field_98"),
    field99: text("field_99"),
    field100: text("field_100"),
    score: text("score"),
    screeningTypeId: text("screening_type_id"),
    perOrgId: text("per_org_id").notNull(),
    loadedDateTime: timestamp("loaded_date_time", { withTimezone: true }),

    // Lineage - FK to load_run_files (same as raw tables)
    loadRunFileId: integer("load_run_file_id").notNull(),
    loadTs: timestamp("load_ts", { withTimezone: true }).notNull().defaultNow(),
  },
  (table) => [
    // Unique constraint on natural key
    uniqueIndex("measurements_stg_natural_key_idx").on(
      table.screaningId,
      table.practiceId,
      table.perOrgId
    ),
  ]
);

// Foreign key constraint to etl.load_run_files
export const fkMeasurementsStgLoadRunFile = foreignKey({
  columns: [measurementsStg.loadRunFileId],
  foreignColumns: [loadRunFiles.loadRunFileId],
  name: "fk_measurements_stg_load_run_file",
});




