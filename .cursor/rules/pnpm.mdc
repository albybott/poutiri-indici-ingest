- **Use pnpm as the Package Manager**
  - This project uses pnpm@9.5.0 as specified in [package.json](mdc:package.json)
  - Always use `pnpm` commands instead of `npm` or `yarn`
  - Leverage pnpm's efficient disk usage and faster installation times

- **Available Scripts:**

  ```bash
  # Development
  pnpm dev                 # Start development server
  pnpm build               # Build for production
  pnpm start               # Start production server
  pnpm lint                # Run ESLint

  # Database Operations
  pnpm db:generate         # Generate database migrations
  pnpm db:migrate          # Run database migrations
  pnpm db:push             # Push schema changes to database
  pnpm db:studio           # Open Drizzle Studio
  pnpm db:seed             # Seed database with development data

  # Testing & Utilities
  pnpm test                # Run test utilities

  # Deployment
  pnpm start:pm2           # Start with PM2 process manager
  pnpm deploy:pm2          # Build and deploy with PM2
  ```

- **Package Management Guidelines:**

  ```bash
  # ✅ DO: Use pnpm for all package operations
  pnpm install
  pnpm add package-name
  pnpm add -D package-name
  pnpm remove package-name

  # ❌ DON'T: Use npm or yarn
  npm install
  yarn add package-name
  ```

- **Development Workflow:**
  - Use `pnpm dev` for local development
  - Use `pnpm db:studio` to manage database visually
  - Run `pnpm db:seed` to populate development data
  - Use `pnpm lint` before committing code
  - Use `pnpm build` to test production builds locally
- **Use pnpm as the Package Manager**
  - This project uses pnpm@9.5.0 as specified in [package.json](mdc:package.json)
  - Always use `pnpm` commands instead of `npm` or `yarn`
  - Leverage pnpm's efficient disk usage and faster installation times

- **Available Scripts:**

  ```bash
  # Development
  pnpm dev                 # Start development server
  pnpm build               # Build for production
  pnpm start               # Start production server
  pnpm lint                # Run ESLint

  # Database Operations
  pnpm db:generate         # Generate database migrations
  pnpm db:migrate          # Run database migrations
  pnpm db:push             # Push schema changes to database
  pnpm db:studio           # Open Drizzle Studio
  pnpm db:seed             # Seed database with development data

  # Testing & Utilities
  pnpm test                # Run test utilities

  # Deployment
  pnpm start:pm2           # Start with PM2 process manager
  pnpm deploy:pm2          # Build and deploy with PM2
  ```

- **Package Management Guidelines:**

  ```bash
  # ✅ DO: Use pnpm for all package operations
  pnpm install
  pnpm add package-name
  pnpm add -D package-name
  pnpm remove package-name

  # ❌ DON'T: Use npm or yarn
  npm install
  yarn add package-name
  ```

- **Development Workflow:**
  - Use `pnpm dev` for local development
  - Use `pnpm db:studio` to manage database visually
  - Run `pnpm db:seed` to populate development data
  - Use `pnpm lint` before committing code
  - Use `pnpm build` to test production builds locally
- **Use pnpm as the Package Manager**
  - This project uses pnpm@9.5.0 as specified in [package.json](mdc:package.json)
  - Always use `pnpm` commands instead of `npm` or `yarn`
  - Leverage pnpm's efficient disk usage and faster installation times

- **Available Scripts:**

  ```bash
  # Development
  pnpm dev                 # Start development server
  pnpm build               # Build for production
  pnpm start               # Start production server
  pnpm lint                # Run ESLint

  # Database Operations
  pnpm db:generate         # Generate database migrations
  pnpm db:migrate          # Run database migrations
  pnpm db:push             # Push schema changes to database
  pnpm db:studio           # Open Drizzle Studio
  pnpm db:seed             # Seed database with development data

  # Testing & Utilities
  pnpm test                # Run test utilities

  # Deployment
  pnpm start:pm2           # Start with PM2 process manager
  pnpm deploy:pm2          # Build and deploy with PM2
  ```

- **Package Management Guidelines:**

  ```bash
  # ✅ DO: Use pnpm for all package operations
  pnpm install
  pnpm add package-name
  pnpm add -D package-name
  pnpm remove package-name

  # ❌ DON'T: Use npm or yarn
  npm install
  yarn add package-name
  ```

- **Development Workflow:**
  - Use `pnpm dev` for local development
  - Use `pnpm db:studio` to manage database visually
  - Run `pnpm db:seed` to populate development data
  - Use `pnpm lint` before committing code
  - Use `pnpm build` to test production builds locally
- **Use pnpm as the Package Manager**
  - This project uses pnpm@9.5.0 as specified in [package.json](mdc:package.json)
  - Always use `pnpm` commands instead of `npm` or `yarn`
  - Leverage pnpm's efficient disk usage and faster installation times

- **Available Scripts:**

  ```bash
  # Development
  pnpm dev                 # Start development server
  pnpm build               # Build for production
  pnpm start               # Start production server
  pnpm lint                # Run ESLint

  # Database Operations
  pnpm db:generate         # Generate database migrations
  pnpm db:migrate          # Run database migrations
  pnpm db:push             # Push schema changes to database
  pnpm db:studio           # Open Drizzle Studio
  pnpm db:seed             # Seed database with development data

  # Testing & Utilities
  pnpm test                # Run test utilities

  # Deployment
  pnpm start:pm2           # Start with PM2 process manager
  pnpm deploy:pm2          # Build and deploy with PM2
  ```

- **Package Management Guidelines:**

  ```bash
  # ✅ DO: Use pnpm for all package operations
  pnpm install
  pnpm add package-name
  pnpm add -D package-name
  pnpm remove package-name

  # ❌ DON'T: Use npm or yarn
  npm install
  yarn add package-name
  ```

- **Development Workflow:**
  - Use `pnpm dev` for local development
  - Use `pnpm db:studio` to manage database visually
  - Run `pnpm db:seed` to populate development data
  - Use `pnpm lint` before committing code
  - Use `pnpm build` to test production builds locally
