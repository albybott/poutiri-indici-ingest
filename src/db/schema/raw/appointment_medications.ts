import { text, timestamp, uuid } from "drizzle-orm/pg-core";
import { createTable } from "../../../utils/create-table.js";

export const appointmentMedicationsRaw = createTable(
  "raw.appointment_medications_raw",
  {
    // Source columns as text (all fields from AppointmentMedicaitons extract)
    medicationId: text("medication_id"),
    appointmentId: text("appointment_id"),
    patientId: text("patient_id"),
    sctid: text("sctid"),
    medicineId: text("medicine_id"),
    medicineName: text("medicine_name"),
    strength: text("strength"),
    form: text("form"),
    take: text("take"),
    frequency: text("frequency"),
    dailyfreq: text("dailyfreq"),
    route: text("route"),
    duration: text("duration"),
    durationType: text("duration_type"),
    startDate: text("start_date"),
    endDate: text("end_date"),
    stopDate: text("stop_date"),
    repeats: text("repeats"),
    saStatus: text("sa_status"),
    saNumber: text("sa_number"),
    expiryDate: text("expiry_date"),
    subsidyAmount: text("subsidy_amount"),
    price: text("price"),
    providerId: text("provider_id"),
    provider: text("provider"),
    taskId: text("task_id"),
    directions: text("directions"),
    isConfidential: text("is_confidential"),
    isLongTerm: text("is_long_term"),
    isPrescribedExternally: text("is_prescribed_externally"),
    isStopped: text("is_stopped"),
    isHighlighted: text("is_highlighted"),
    isPracticeinAdmin: text("is_practicein_admin"),
    isTrial: text("is_trial"),
    stoppedReason: text("stopped_reason"),
    medicationStopReason: text("medication_stop_reason"),
    rxScid: text("rx_scid"),
    rxDate: text("rx_date"),
    rxStatus: text("rx_status"),
    isDispense: text("is_dispense"),
    printedBy: text("printed_by"),
    printedAt: text("printed_at"),
    comments: text("comments"),
    isActive: text("is_active"),
    isDeleted: text("is_deleted"),
    insertedBy: text("inserted_by"),
    updatedBy: text("updated_by"),
    insertedAt: text("inserted_at"),
    updatedAt: text("updated_at"),
    medTechId: text("med_tech_id"),
    isMapped: text("is_mapped"),
    medTechDrugCode: text("med_tech_drug_code"),
    medTechGenericName: text("med_tech_generic_name"),
    practiceId: text("practice_id"),
    prescibedExternlayId: text("prescibed_externlay_id"),
    prescibedExternlayDesc: text("prescibed_externlay_desc"),
    quantity: text("quantity"),
    isGenericSubstitution: text("is_generic_substitution"),
    isFrequentDispensed: text("is_frequent_dispensed"),
    initialDispensePeriod: text("initial_dispense_period"),
    initialDispensePeriodType: text("initial_dispense_period_type"),
    trialPeriod: text("trial_period"),
    trialType: text("trial_type"),
    isSpecalistRecomended: text("is_specalist_recomended"),
    specalistName: text("specalist_name"),
    recomendationDate: text("recomendation_date"),
    isEndorsementCriteria: text("is_endorsement_criteria"),
    isProviderEligibleCoPayment: text("is_provider_eligible_co_payment"),
    userLoggingId: text("user_logging_id"),
    isOverride: text("is_override"),
    overrideReason: text("override_reason"),
    isTaskGenerated: text("is_task_generated"),
    showOnPortal: text("show_on_portal"),
    patientSaRecordId: text("patient_sa_record_id"),
    stoppedBy: text("stopped_by"),
    mappedBy: text("mapped_by"),
    mappedDate: text("mapped_date"),
    recomendationOverrideReason: text("recomendation_override_reason"),
    isVariableDose: text("is_variable_dose"),
    isDoseChange: text("is_dose_change"),
    referenceMedication: text("reference_medication"),
    mimscode: text("mimscode"),
    permanentAddressLatitude: text("permanent_address_latitude"),
    permanentAddressLongitude: text("permanent_address_longitude"),
    practiceLocationId: text("practice_location_id"),
    locationName: text("location_name"),
    prescriptionPrintDate: text("prescription_print_date"),
    prescriptionNo: text("prescription_no"),
    substanceName: text("substance_name"),
    perOrgId: text("per_org_id"),
    loadedDateTime: text("loaded_date_time"),

    // Lineage columns
    s3Bucket: text("s3_bucket").notNull(),
    s3Key: text("s3_key").notNull(),
    s3VersionId: text("s3_version_id").notNull(),
    fileHash: text("file_hash").notNull(),
    dateExtracted: text("date_extracted").notNull(),
    extractType: text("extract_type").notNull(),
    loadRunId: uuid("load_run_id").notNull(),
    loadTs: timestamp("load_ts", { withTimezone: true }).notNull().defaultNow(),
  }
);
