import {
  text,
  timestamp,
  uuid,
  boolean,
  integer,
  decimal,
  date,
  check,
  uniqueIndex,
  foreignKey,
} from "drizzle-orm/pg-core";
import { sql } from "drizzle-orm";
import { createTable } from "../../utils/create-table";
import { loadRunFiles } from "../etl/audit";

export const appointmentMedicationsStg = createTable(
  "stg.appointment_medications",
  {
    // Typed columns with proper constraints
    medicationId: text("medication_id").notNull(),
    appointmentId: text("appointment_id"),
    patientId: text("patient_id").notNull(),
    sctid: text("sctid"),
    medicineId: text("medicine_id"),
    medicineName: text("medicine_name"),
    strength: text("strength"),
    form: text("form"),
    take: text("take"),
    frequency: text("frequency"),
    dailyfreq: text("dailyfreq"),
    route: text("route"),
    duration: integer("duration"),
    durationType: text("duration_type"),
    startDate: date("start_date"),
    endDate: date("end_date"),
    stopDate: date("stop_date"),
    repeats: integer("repeats"),
    saStatus: text("sa_status"),
    saNumber: text("sa_number"),
    expiryDate: date("expiry_date"),
    subsidyAmount: decimal("subsidy_amount", { precision: 10, scale: 2 }),
    price: decimal("price", { precision: 10, scale: 2 }),
    providerId: text("provider_id"),
    provider: text("provider"),
    taskId: text("task_id"),
    directions: text("directions"),
    isConfidential: boolean("is_confidential"),
    isLongTerm: boolean("is_long_term"),
    isPrescribedExternally: boolean("is_prescribed_externally"),
    isStopped: boolean("is_stopped"),
    isHighlighted: boolean("is_highlighted"),
    isPracticeinAdmin: boolean("is_practicein_admin"),
    isTrial: boolean("is_trial"),
    stoppedReason: text("stopped_reason"),
    medicationStopReason: text("medication_stop_reason"),
    rxScid: text("rx_scid"),
    rxDate: date("rx_date"),
    rxStatus: text("rx_status"),
    isDispense: boolean("is_dispense"),
    printedBy: text("printed_by"),
    printedAt: timestamp("printed_at", { withTimezone: true }),
    comments: text("comments"),
    isActive: boolean("is_active"),
    isDeleted: boolean("is_deleted"),
    insertedBy: text("inserted_by"),
    updatedBy: text("updated_by"),
    insertedAt: timestamp("inserted_at", { withTimezone: true }),
    updatedAt: timestamp("updated_at", { withTimezone: true }),
    medTechId: text("med_tech_id"),
    isMapped: boolean("is_mapped"),
    medTechDrugCode: text("med_tech_drug_code"),
    medTechGenericName: text("med_tech_generic_name"),
    practiceId: text("practice_id").notNull(),
    prescibedExternlayId: text("prescibed_externlay_id"),
    prescibedExternlayDesc: text("prescibed_externlay_desc"),
    quantity: decimal("quantity", { precision: 10, scale: 2 }),
    isGenericSubstitution: boolean("is_generic_substitution"),
    isFrequentDispensed: boolean("is_frequent_dispensed"),
    initialDispensePeriod: integer("initial_dispense_period"),
    initialDispensePeriodType: text("initial_dispense_period_type"),
    trialPeriod: integer("trial_period"),
    trialType: text("trial_type"),
    isSpecalistRecomended: boolean("is_specalist_recomended"),
    specalistName: text("specalist_name"),
    recomendationDate: date("recomendation_date"),
    isEndorsementCriteria: boolean("is_endorsement_criteria"),
    isProviderEligibleCoPayment: boolean("is_provider_eligible_co_payment"),
    userLoggingId: text("user_logging_id"),
    isOverride: boolean("is_override"),
    overrideReason: text("override_reason"),
    isTaskGenerated: boolean("is_task_generated"),
    showOnPortal: boolean("show_on_portal"),
    patientSaRecordId: text("patient_sa_record_id"),
    stoppedBy: text("stopped_by"),
    mappedBy: text("mapped_by"),
    mappedDate: date("mapped_date"),
    recomendationOverrideReason: text("recomendation_override_reason"),
    isVariableDose: boolean("is_variable_dose"),
    isDoseChange: boolean("is_dose_change"),
    referenceMedication: text("reference_medication"),
    mimscode: text("mimscode"),
    permanentAddressLatitude: decimal("permanent_address_latitude", {
      precision: 10,
      scale: 8,
    }),
    permanentAddressLongitude: decimal("permanent_address_longitude", {
      precision: 11,
      scale: 8,
    }),
    practiceLocationId: text("practice_location_id"),
    locationName: text("location_name"),
    prescriptionPrintDate: date("prescription_print_date"),
    prescriptionNo: text("prescription_no"),
    substanceName: text("substance_name"),
    perOrgId: text("per_org_id").notNull(),
    loadedDateTime: timestamp("loaded_date_time", { withTimezone: true }),

    // Lineage - FK to load_run_files (same as raw tables)
    loadRunFileId: integer("load_run_file_id").notNull(),
    loadTs: timestamp("load_ts", { withTimezone: true }).notNull().defaultNow(),
  },
  (table) => [
    // Unique constraint on natural key
    uniqueIndex("appointment_medications_stg_natural_key_idx").on(
      table.medicationId,
      table.practiceId,
      table.perOrgId
    ),
  ]
);

// Foreign key constraint to etl.load_run_files
export const fkAppointmentMedicationsStgLoadRunFile = foreignKey({
  columns: [appointmentMedicationsStg.loadRunFileId],
  foreignColumns: [loadRunFiles.loadRunFileId],
  name: "fk_appointment_medications_stg_load_run_file",
});




